buildscript {
    ext {
        springBootVersion = '1.4.0.M1'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
    baseName = 'prorata-server'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test-integration/java')
        }
        resources.srcDir file('src/test-integration/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {

    // Local
    testCompile project(path: ':Generic-SpringBoot-Server-App', configuration: 'testOutput')
    integrationTestCompile project(path: ':Generic-SpringBoot-Server-App', configuration: 'integrationTestOutput')
    compile project(':Generic-SpringBoot-Server-App')
    compile project(':ProRata-Model')
    compile project(':ProrataUser-Service')

    // Remote
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    runtime('org.postgresql:postgresql')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.dbunit:dbunit:2.4.9')
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

def String propertiesFile = "src/main/resources/application.properties"

if (project.hasProperty('propFile')) {
    propertiesFile = "$propFile";
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

task stage {
    dependsOn build
}

task copyToLib(type: Copy) {
    into "$buildDir/lib"
    from(configurations.compile)
}

stage.dependsOn(copyToLib)

task integrationTest(type: Test) {
    println("Integration tests running against file: $propertiesFile")
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
    systemProperty "spring.config.location", "file:$propertiesFile"
}


check.dependsOn integrationTest
integrationTest.mustRunAfter test


tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
